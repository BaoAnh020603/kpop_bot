import discord
from discord.ext import commands
import yt_dlp
import random
import asyncio
import os
import requests
from keep_alive import keep_alive 

keep_alive() 

# ===== C·∫§U H√åNH BOT (Gi·ªØ nguy√™n) =====
intents = discord.Intents.default()
intents.voice_states = True
intents.guilds = True
intents.message_content = True 
bot = commands.Bot(command_prefix="!", intents=intents)

# ===== DANH S√ÅCH NH·∫†C M·∫∂C ƒê·ªäNH & QUEUE (CH·ªà DAILYMOTION) =====
DEFAULT_KPOP_SONGS = [
    "https://www.dailymotion.com/video/x7zuocf",
    "https://www.dailymotion.com/video/x8psjs7",
    "https://www.dailymotion.com/video/x7t3ao4",
    "https://www.dailymotion.com/video/x425w0w",
    "https://www.dailymotion.com/video/x3zwk2r",
    "https://www.dailymotion.com/video/x683djo",
    "https://www.dailymotion.com/video/x7bugyp",
    "https://www.dailymotion.com/video/x8pl2nq",
    "https://www.dailymotion.com/video/x4qz046",
    "https://www.dailymotion.com/video/x8p3p6w",
    "https://www.dailymotion.com/video/x42wf0z",
    "https://www.dailymotion.com/video/x2wto4r",
    "https://www.dailymotion.com/video/x9miaw0",
    "https://www.dailymotion.com/video/x74e7xl",
    "https://www.dailymotion.com/video/x2mpj5b",
    "https://www.dailymotion.com/video/x3cbksb",
    "https://www.dailymotion.com/video/x8ucqke",
    "https://www.dailymotion.com/video/x8aauvk",
    "https://www.dailymotion.com/video/x1y5ufe", 
]

queues = {}       
current_song = {} 
IDLE_TIMEOUT = 300 
idle_timers = {}   

# ‚≠êÔ∏è H√ÄM M·ªöI: H·ªó tr·ª£ Playlist Dailymotion ‚≠êÔ∏è
def extract_info_from_url(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'nocheckcertificate': True,
        "http_headers": {"User-Agent": "Mozilla/5.0"},
        'extract_flat': 'in_playlist',
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # ƒê·ªëi v·ªõi URL, c·ªë g·∫Øng l·∫•y to√†n b·ªô playlist Dailymotion
            info = ydl.extract_info(url, download=False, process=False)
            return info
    except Exception as e:
        print(f"‚ùå L·ªói yt-dlp khi tr√≠ch xu·∫•t info: {e}")
        return None

# (H√†m qu·∫£n l√Ω timer: cancel_idle_timer, set_idle_timer gi·ªØ nguy√™n)
def cancel_idle_timer(guild_id):
    if guild_id in idle_timers:
        idle_timers[guild_id].cancel()
        del idle_timers[guild_id]

async def set_idle_timer(guild_id, vc):
    cancel_idle_timer(guild_id)
    
    async def idle_timeout():
        await asyncio.sleep(IDLE_TIMEOUT)
        
        if vc and not vc.is_playing() and len(queues.get(guild_id, [])) == 0:
            if len(vc.channel.members) <= 1: 
                await vc.channel.send("üëã Bot ƒë√£ r·ªùi kh·ªèi k√™nh tho·∫°i do kh√¥ng ho·∫°t ƒë·ªông trong 5 ph√∫t.")
                await vc.disconnect()
                await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))

    idle_timers[guild_id] = bot.loop.create_task(idle_timeout())


# (PlayerButtons class gi·ªØ nguy√™n)
class PlayerButtons(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        vc = interaction.guild.voice_client
        if vc is None or interaction.user.voice is None or interaction.user.voice.channel != vc.channel:
            await interaction.response.send_message("‚ùå B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ ƒëi·ªÅu khi·ªÉn bot.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="B·ªè qua", style=discord.ButtonStyle.secondary, emoji="‚è≠Ô∏è", custom_id="skip_button")
    async def skip_button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if vc and vc.is_playing():
            vc.stop()
            await interaction.response.send_message("‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i m·ªõi.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)
        
    @discord.ui.button(label="T·∫°m d·ª´ng / Ti·∫øp t·ª•c", style=discord.ButtonStyle.primary, emoji="‚èØÔ∏è", custom_id="pause_resume_button")
    async def pause_resume_button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if vc:
            if vc.is_playing():
                vc.pause()
                await interaction.response.send_message("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng ph√°t nh·∫°c.", ephemeral=True)
            elif vc.is_paused():
                vc.resume()
                await interaction.response.send_message("‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t nh·∫°c.", ephemeral=True)
            else:
                await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)
        
    @discord.ui.button(label="D·ª´ng & R·ªùi", style=discord.ButtonStyle.danger, emoji="üõë", custom_id="stop_leave_button")
    async def stop_leave_button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if vc:
            queues[interaction.guild.id] = []
            vc.stop()
            await vc.disconnect()
            await self.bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
            await interaction.response.send_message("üõë Bot ƒë√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi k√™nh.", ephemeral=False)
        else:
            await interaction.response.send_message("‚ö†Ô∏è Bot kh√¥ng ·ªü trong k√™nh tho·∫°i.", ephemeral=True)


# H√ÄM PH√ÅT NH·∫†C
async def play_next_song(vc, interaction=None):
    guild_id = vc.guild.id
    
    if not queues.get(guild_id):
        current_song[guild_id] = None
        await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
        await set_idle_timer(guild_id, vc) 
        return

    cancel_idle_timer(guild_id)
    
    url = queues[guild_id].pop(0)

    ydl_opts = {
        "format": "bestaudio/best",
        "quiet": True,
        "nocheckcertificate": True,
        "http_headers": {"User-Agent": "Mozilla/5.0"},
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False, process=True)
            audio_url = info.get("url")
            title = info.get("title", "Unknown Title")
            uploader = info.get("uploader", "Unknown Artist")
            thumbnail = info.get("thumbnail")
            webpage_url = info.get("webpage_url")
            
            if not audio_url:
                 raise Exception("Kh√¥ng t√¨m th·∫•y URL audio.")

    except Exception as e:
        print(f"‚ùå L·ªói yt-dlp khi x·ª≠ l√Ω {url}: {e}")
        if queues[guild_id]:
            await play_next_song(vc, interaction)
        return

    # AUTO-QUEUE CHECK: T·ª± ƒë·ªông n·∫°p l·∫°i danh s√°ch khi queue c√≤n √≠t b√†i
    if len(queues.get(guild_id, [])) <= 3:
        random_songs = random.sample(DEFAULT_KPOP_SONGS, min(5, len(DEFAULT_KPOP_SONGS)))
        queues[guild_id].extend(random_songs)
        print(f"‚úÖ Auto-Queue: ƒê√£ th√™m {len(random_songs)} b√†i ng·∫´u nhi√™n.")
    
    current_song[guild_id] = {
        "title": title,
        "uploader": uploader,
        "thumbnail": thumbnail,
        "url": webpage_url
    }
    
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.listening, 
            name=f"{title} | {uploader}"
        )
    )

    def after_play(err):
        if err:
            print(f"‚ùå L·ªói khi ph√°t nh·∫°c: {err}")
        asyncio.run_coroutine_threadsafe(play_next_song(vc, None), bot.loop)
        
    if vc.is_playing():
        vc.stop()

    try:
        source = discord.FFmpegPCMAudio(
                audio_url,
                before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
                options="-vn"
            )
        vc.play(
            source,
            after=after_play
        )
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi vc.play: {e}")
        if queues[guild_id]:
            await play_next_song(vc, interaction)
        return

    # Giao di·ªán Embed X·ªãn X√≤ h∆°n
    embed = discord.Embed(
        title=f"üé∂ ƒêang ph√°t: {title}",
        description=f"**üé§ Ch·ªß k√™nh ƒëƒÉng t·∫£i video:** {uploader}",
        color=0xFF0099 
    )
    embed.add_field(name="üîó Ngu·ªìn", value=f"[Xem tr√™n Web]({webpage_url})", inline=True)
    embed.set_footer(text=f"H√†ng ƒë·ª£i: {len(queues.get(guild_id, []))} b√†i | Auto-Queue ƒêang B·∫≠t üîÑ")
    
    if thumbnail:
        embed.set_thumbnail(url=thumbnail)
    
    # G·ª¨I EMBED K√àM BUTTONS
    view = PlayerButtons(bot)
    
    if interaction:
        try:
            await interaction.followup.send(embed=embed, view=view)
        except discord.errors.NotFound:
            channel = interaction.channel
            if channel:
                await channel.send(embed=embed, view=view)
    elif vc.channel:
        await vc.channel.send(embed=embed, view=view)


# ===== S·ª∞ KI·ªÜN BOT (Gi·ªØ nguy√™n) =====
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ ƒê√£ ƒë·ªìng b·ªô {len(synced)} slash command.")
    except Exception as e:
        print(f"‚ùå L·ªói khi sync slash command: {e}")
    
    await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))


# ‚≠êÔ∏è L·ªÜNH /play (Ch·ªâ H·ªó tr·ª£ URL Dailymotion v√† Playlist) ‚≠êÔ∏è
@bot.tree.command(name="play", description="Ph√°t nh·∫°c ng·∫´u nhi√™n ho·∫∑c th√™m Playlist/URL Dailymotion üé∂")
async def play(interaction: discord.Interaction, query: str = None):
    await interaction.response.defer()

    guild = interaction.guild
    if interaction.user.voice and interaction.user.voice.channel:
        voice_channel = interaction.user.voice.channel
    else:
        voice_channel = discord.utils.get(guild.voice_channels, name="üéß‚îÇchill-room")

    if not voice_channel:
        await interaction.followup.send("‚ùå Vui l√≤ng v√†o k√™nh tho·∫°i ho·∫∑c t·∫°o k√™nh `üéß‚îÇchill-room`.", ephemeral=True)
        return

    vc = guild.voice_client
    if vc is None:
        try:
            vc = await voice_channel.connect()
        except asyncio.TimeoutError:
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi k√™nh tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i.", ephemeral=True)
            return
    
    # X·ª≠ l√Ω Query/Playlist
    if query:
        # ‚ö†Ô∏è CH·ªà CHO PH√âP URL (B·ªé LOGIC T√åM KI·∫æM T√äN B√ÄI H√ÅT)
        if not query.startswith("http"):
            await interaction.followup.send("‚ùå Vui l√≤ng cung c·∫•p URL Dailymotion h·ª£p l·ªá (kh√¥ng h·ªó tr·ª£ t√¨m ki·∫øm t√™n b√†i).", ephemeral=True)
            return

        info = await asyncio.to_thread(extract_info_from_url, query)
        
        if not info:
            await interaction.followup.send(f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho URL `{query}`.", ephemeral=True)
            return

        # ‚≠êÔ∏è Logic x·ª≠ l√Ω Playlist (Queue nhi·ªÅu b√†i) ‚≠êÔ∏è
        if info.get('_type') == 'playlist' and 'entries' in info:
            count = 0
            for entry in info['entries']:
                if entry and 'webpage_url' in entry:
                    queues.setdefault(guild.id, []).append(entry['webpage_url'])
                    count += 1
            
            if count > 0:
                msg = f"‚úÖ ƒê√£ th√™m **{count}** b√†i h√°t t·ª´ Playlist `{info.get('title', 'Kh√¥ng t√™n')}` v√†o h√†ng ƒë·ª£i!"
                if not vc.is_playing() and not vc.is_paused():
                     asyncio.create_task(play_next_song(vc, interaction))
                await interaction.followup.send(msg)
                return
            else:
                await interaction.followup.send("‚ö†Ô∏è Playlist kh√¥ng ch·ª©a URL b√†i h√°t h·ª£p l·ªá n√†o.", ephemeral=True)
                return
        
        # Logic x·ª≠ l√Ω Video ƒê∆°n
        elif 'webpage_url' in info:
            url = info['webpage_url']
            song_title = info['title']
        else:
            await interaction.followup.send(f"‚ùå L·ªói khi x·ª≠ l√Ω URL `{query}`.", ephemeral=True)
            return
    else:
        # N·∫øu kh√¥ng c√≥ query, ch·ªçn b√†i ng·∫´u nhi√™n t·ª´ danh s√°ch m·∫∑c ƒë·ªãnh
        url = random.choice(DEFAULT_KPOP_SONGS)
        song_title = "b√†i h√°t ng·∫´u nhi√™n"
        
    # Th√™m b√†i h√°t ƒë∆°n v√†o queue
    queues.setdefault(guild.id, []).append(url)
    
    # Th√¥ng b√°o th√™m v√†o queue/b·∫Øt ƒë·∫ßu ph√°t
    if vc.is_playing() or vc.is_paused():
        await interaction.followup.send(f"‚úÖ ƒê√£ th√™m **{song_title}** v√†o h√†ng ƒë·ª£i.")
    else:
        await interaction.followup.send(f"üéß B·∫Øt ƒë·∫ßu ph√°t **{song_title}**...")
        asyncio.create_task(play_next_song(vc, interaction))


# (C√°c l·ªánh kh√°c gi·ªØ nguy√™n)
@bot.tree.command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng bot (0-100%) üîä")
async def volume(interaction: discord.Interaction, level: int):
    vc = interaction.guild.voice_client
    if not vc or vc.source is None:
        await interaction.response.send_message("‚ö†Ô∏è Bot ch∆∞a ph√°t nh·∫°c.", ephemeral=True)
        return

    if not (0 <= level <= 100):
        await interaction.response.send_message("‚ùå M·ª©c √¢m l∆∞·ª£ng ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 0 ƒë·∫øn 100.", ephemeral=True)
        return

    if isinstance(vc.source, discord.PCMVolumeTransformer):
        vc.source.volume = level / 100.0
    else:
        vc.source = discord.PCMVolumeTransformer(vc.source, volume=level / 100.0)

    await interaction.response.send_message(f"üîä ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng bot th√†nh **{level}%**.", ephemeral=False)


@bot.tree.command(name="jump", description="Chuy·ªÉn ƒë·∫øn b√†i h√°t theo s·ªë th·ª© t·ª± trong h√†ng ƒë·ª£i üî¢")
async def jump(interaction: discord.Interaction, index: int):
    vc = interaction.guild.voice_client
    guild_id = interaction.guild.id
    
    if not vc or not vc.is_playing():
        await interaction.response.send_message("‚ö†Ô∏è Bot ch∆∞a ph√°t nh·∫°c.", ephemeral=True)
        return
    
    q = queues.get(guild_id, [])
    if index < 1 or index > len(q):
        await interaction.response.send_message(f"‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. H√†ng ƒë·ª£i c√≥ {len(q)} b√†i (b·∫Øt ƒë·∫ßu t·ª´ 1).", ephemeral=True)
        return
        
    del q[:index - 1] 
    vc.stop() 
    
    await interaction.response.send_message(f"üî¢ ƒê√£ nh·∫£y ƒë·∫øn b√†i h√°t th·ª© **{index}** trong h√†ng ƒë·ª£i.", ephemeral=False)


@bot.tree.command(name="skip", description="Chuy·ªÉn sang b√†i ti·∫øp theo ‚è≠Ô∏è")
async def skip(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_playing():
        vc.stop()
        await interaction.response.send_message("‚è≠Ô∏è Chuy·ªÉn sang b√†i m·ªõi...")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)

@bot.tree.command(name="pause", description="T·∫°m d·ª´ng nh·∫°c ‚è∏Ô∏è")
async def pause(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_playing():
        vc.pause()
        await interaction.response.send_message("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng ph√°t nh·∫°c.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)

@bot.tree.command(name="resume", description="Ti·∫øp t·ª•c ph√°t nh·∫°c ‚ñ∂Ô∏è")
async def resume(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_paused():
        vc.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t nh·∫°c.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang t·∫°m d·ª´ng.", ephemeral=True)

@bot.tree.command(name="stop", description="D·ª´ng ph√°t nh·∫°c ‚èπÔ∏è")
async def stop(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc:
        queues[interaction.guild.id] = []
        vc.stop() 
        await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
        await interaction.response.send_message("üõë ƒê√£ d·ª´ng ph√°t nh·∫°c v√† x√≥a queue.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Bot ch∆∞a tham gia k√™nh tho·∫°i.", ephemeral=True)

@bot.tree.command(name="leave", description="Bot r·ªùi kh·ªèi k√™nh tho·∫°i üö™")
async def leave(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc:
        queues[interaction.guild.id] = []
        await vc.disconnect()
        await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
        await interaction.response.send_message("üëã Bot ƒë√£ r·ªùi kh·ªèi k√™nh tho·∫°i.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Bot kh√¥ng ·ªü trong k√™nh tho·∫°i.", ephemeral=True)

@bot.tree.command(name="queue", description="Hi·ªÉn th·ªã danh s√°ch b√†i ch·ªù üìÉ")
async def queue(interaction: discord.Interaction):
    q = queues.get(interaction.guild.id, [])
    if q:
        msg = "\n".join([f"**{i+1}.** {url}" for i, url in enumerate(q[:10])])
        await interaction.response.send_message(f"üìú **Danh s√°ch b√†i ch·ªù ({len(q)} b√†i):**\n{msg}")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o trong h√†ng ƒë·ª£i.", ephemeral=True)

@bot.tree.command(name="nowplaying", description="Hi·ªÉn th·ªã b√†i h√°t ƒëang ph√°t üé∂")
async def nowplaying(interaction: discord.Interaction):
    song = current_song.get(interaction.guild.id)
    if song:
        embed = discord.Embed(
            title=f"üé∂ ƒêang ph√°t: {song['title']}",
            description=f"üé§ **Ngh·ªá sƒ©:** {song['uploader']}\nüîó [Xem tr√™n Web]({song['url']})",
            color=0xFF0099
        )
        if song["thumbnail"]:
            embed.set_thumbnail(url=song["thumbnail"])
        
        view = PlayerButtons(bot)
        await interaction.response.send_message(embed=embed, view=view)
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)

@bot.tree.command(name="shuffle", description="Tr·ªôn ng·∫´u nhi√™n danh s√°ch b√†i ch·ªù üîÄ")
async def shuffle(interaction: discord.Interaction):
    q = queues.get(interaction.guild.id, [])
    if len(q) > 1:
        random.shuffle(q)
        await interaction.response.send_message("üîÄ ƒê√£ tr·ªôn l·∫°i th·ª© t·ª± c√°c b√†i trong h√†ng ƒë·ª£i!")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng ƒë·ªß b√†i ƒë·ªÉ tr·ªôn.", ephemeral=True)

@bot.tree.command(name="help", description="Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot ‚ÑπÔ∏è")
async def help(interaction: discord.Interaction):
    embed = discord.Embed(
        title="‚ú® KPop Radio Bot - H∆∞·ªõng D·∫´n L·ªánh ‚ú®",
        description="Bot ch·ªâ ch·∫•p nh·∫≠n URL Dailymotion (video ho·∫∑c playlist) ho·∫∑c ph√°t nh·∫°c ng·∫´u nhi√™n.",
        color=0xFF0099 
    )
    
    embed.add_field(name="‚ñ∂Ô∏è Ph√°t Nh·∫°c & ƒêi·ªÅu Khi·ªÉn", value="`/play [link Playlist/Video]`, `/pause`, `/resume`, `/skip`, `/stop`", inline=False)
    embed.add_field(name="‚öôÔ∏è Qu·∫£n L√Ω N√¢ng Cao", value="`/volume [0-100]`, `/jump [index]`, `/shuffle`", inline=False)
    embed.add_field(name="üìú Th√¥ng tin & Queue", value="`/nowplaying`, `/queue`", inline=False)
    embed.add_field(name="üö™ R·ªùi ƒêi", value="`/leave`", inline=False)

    embed.set_footer(text="üíñ ƒê∆∞·ª£c ph√°t tri·ªÉn t·∫°i Vi·ªát Nam | D√πng /play ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    await interaction.response.send_message(embed=embed)


# ===== CH·∫†Y BOT (Gi·ªØ nguy√™n) =====
TOKEN = os.getenv("DISCORD_TOKEN") 

if TOKEN:
    bot.run(TOKEN)
else:
    print("‚ùå L·ªñI NGHI√äM TR·ªåNG: KH√îNG T√åM TH·∫§Y DISCORD_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng.")
