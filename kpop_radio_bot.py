import discord
from discord.ext import commands
import yt_dlp
import random
import asyncio
import os
import requests
from keep_alive import keep_alive 

keep_alive() 

# ===== C·∫§U H√åNH BOT =====
intents = discord.Intents.default()
intents.voice_states = True
intents.guilds = True
intents.message_content = True 
bot = commands.Bot(command_prefix="!", intents=intents)

# ===== DANH S√ÅCH NH·∫†C M·∫∂C ƒê·ªäNH & QUEUE =====
DEFAULT_KPOP_SONGS = [
    "https://www.dailymotion.com/video/x7zuocf",
    "https://www.dailymotion.com/video/x8psjs7",
    "https://www.dailymotion.com/video/x7t3ao4",
    "https://www.dailymotion.com/video/x425w0w",
    "https://www.dailymotion.com/video/x3zwk2r",
    "https://www.dailymotion.com/video/x683djo",
    "https://www.dailymotion.com/video/x7bugyp",
    "https://www.dailymotion.com/video/x8pl2nq",
    "https://www.dailymotion.com/video/x4qz046",
    "https://www.dailymotion.com/video/x8p3p6w",
    "https://www.dailymotion.com/video/x42wf0z",
    "https://www.dailymotion.com/video/x2wto4r",
    "https://www.dailymotion.com/video/x9miaw0",
    "https://www.dailymotion.com/video/x74e7xl",
    "https://www.dailymotion.com/video/x2mpj5b",
    "https://www.dailymotion.com/video/x3cbksb",
    "https://www.dailymotion.com/video/x8ucqke",
    "https://www.dailymotion.com/video/x8aauvk",
    "https://www.dailymotion.com/video/x1y5ufe",
]

queues = {}       
current_song = {} 
IDLE_TIMEOUT = 300 # 5 ph√∫t (300 gi√¢y)
idle_timers = {}   # {guild_id: asyncio.Task}


# H√†m t√¨m ki·∫øm YouTube b·∫±ng yt-dlp
def search_youtube(query):
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'default_search': 'ytsearch',
        'nocheckcertificate': True,
        "http_headers": {"User-Agent": "Mozilla/5.0"},
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=False)
            if 'entries' in info:
                return info['entries'][0]
            return info
    except Exception as e:
        print(f"‚ùå L·ªói t√¨m ki·∫øm yt-dlp: {e}")
        return None


# H√†m ki·ªÉm tra v√† h·ªßy timer t·ª± ƒë·ªông r·ªùi ƒëi
def cancel_idle_timer(guild_id):
    if guild_id in idle_timers:
        idle_timers[guild_id].cancel()
        del idle_timers[guild_id]

# H√†m thi·∫øt l·∫≠p timer t·ª± ƒë·ªông r·ªùi ƒëi
async def set_idle_timer(guild_id, vc):
    cancel_idle_timer(guild_id)
    
    async def idle_timeout():
        await asyncio.sleep(IDLE_TIMEOUT)
        
        # Ki·ªÉm tra l·∫°i tr∆∞·ªõc khi ng·∫Øt k·∫øt n·ªëi
        if vc and not vc.is_playing() and len(queues.get(guild_id, [])) == 0:
            # Ch·ªâ ng·∫Øt n·∫øu bot ƒëang ·ªü m·ªôt m√¨nh ho·∫∑c kh√¥ng c√≥ ai t∆∞∆°ng t√°c
            if len(vc.channel.members) <= 1: 
                await vc.channel.send("üëã Bot ƒë√£ r·ªùi kh·ªèi k√™nh tho·∫°i do kh√¥ng ho·∫°t ƒë·ªông trong 5 ph√∫t.")
                await vc.disconnect()
                await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))

    idle_timers[guild_id] = bot.loop.create_task(idle_timeout())


# ===== KHAI B√ÅO VIEWS (N√öT B·∫§M T∆Ø∆†NG T√ÅC) =====
class PlayerButtons(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        vc = interaction.guild.voice_client
        if vc is None or interaction.user.voice is None or interaction.user.voice.channel != vc.channel:
            await interaction.response.send_message("‚ùå B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ ƒëi·ªÅu khi·ªÉn bot.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="B·ªè qua", style=discord.ButtonStyle.secondary, emoji="‚è≠Ô∏è", custom_id="skip_button")
    async def skip_button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if vc and vc.is_playing():
            vc.stop()
            await interaction.response.send_message("‚è≠Ô∏è ƒê√£ chuy·ªÉn sang b√†i m·ªõi.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)
        
    @discord.ui.button(label="T·∫°m d·ª´ng / Ti·∫øp t·ª•c", style=discord.ButtonStyle.primary, emoji="‚èØÔ∏è", custom_id="pause_resume_button")
    async def pause_resume_button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if vc:
            if vc.is_playing():
                vc.pause()
                await interaction.response.send_message("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng ph√°t nh·∫°c.", ephemeral=True)
            elif vc.is_paused():
                vc.resume()
                await interaction.response.send_message("‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t nh·∫°c.", ephemeral=True)
            else:
                await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)
        
    @discord.ui.button(label="D·ª´ng & R·ªùi", style=discord.ButtonStyle.danger, emoji="üõë", custom_id="stop_leave_button")
    async def stop_leave_button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        vc = interaction.guild.voice_client
        if vc:
            queues[interaction.guild.id] = []
            vc.stop()
            await vc.disconnect()
            await self.bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
            await interaction.response.send_message("üõë Bot ƒë√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi k√™nh.", ephemeral=False)
        else:
            await interaction.response.send_message("‚ö†Ô∏è Bot kh√¥ng ·ªü trong k√™nh tho·∫°i.", ephemeral=True)


# ===== H√ÄM PH√ÅT NH·∫†C (ƒê√É S·ª¨A L·ªñI AFTER_PLAY V√Ä AUTO-QUEUE) =====
async def play_next_song(vc, interaction=None):
    guild_id = vc.guild.id
    
    if not queues.get(guild_id):
        current_song[guild_id] = None
        # K√≠ch ho·∫°t timer t·ª± ƒë·ªông r·ªùi ƒëi khi h√†ng ƒë·ª£i tr·ªëng
        await set_idle_timer(guild_id, vc) 
        return

    # H·ªßy b·ªè timer t·ª± ƒë·ªông r·ªùi ƒëi khi b·∫Øt ƒë·∫ßu ph√°t b√†i m·ªõi
    cancel_idle_timer(guild_id)
    
    url = queues[guild_id].pop(0)

    ydl_opts = {
        "format": "bestaudio/best",
        "quiet": True,
        "nocheckcertificate": True,
        "http_headers": {"User-Agent": "Mozilla/5.0"},
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            audio_url = info.get("url")
            title = info.get("title", "Unknown Title")
            uploader = info.get("uploader", "Unknown Artist")
            thumbnail = info.get("thumbnail")
            webpage_url = info.get("webpage_url")
            
            if not audio_url:
                 raise Exception("Kh√¥ng t√¨m th·∫•y URL audio.")

    except Exception as e:
        print(f"‚ùå L·ªói yt-dlp khi x·ª≠ l√Ω {url}: {e}")
        if queues[guild_id]:
            await play_next_song(vc, interaction)
        return

    # ‚≠êÔ∏è AUTO-QUEUE CHECK: T·ª± ƒë·ªông n·∫°p l·∫°i danh s√°ch khi queue c√≤n √≠t b√†i ‚≠êÔ∏è
    if len(queues.get(guild_id, [])) <= 3:
        random_songs = random.sample(DEFAULT_KPOP_SONGS, min(5, len(DEFAULT_KPOP_SONGS)))
        queues[guild_id].extend(random_songs)
        print(f"‚úÖ Auto-Queue: ƒê√£ th√™m {len(random_songs)} b√†i ng·∫´u nhi√™n.")
    
    current_song[guild_id] = {
        "title": title,
        "uploader": uploader,
        "thumbnail": thumbnail,
        "url": webpage_url
    }
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i bot
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.listening, 
            name=f"{title} | {uploader}"
        )
    )

    # C·∫£i thi·ªán h√†m after_play ƒë·ªÉ x·ª≠ l√Ω chuy·ªÉn b√†i an to√†n
    def after_play(err):
        if err:
            print(f"‚ùå L·ªói khi ph√°t nh·∫°c: {err}")
        asyncio.run_coroutine_threadsafe(play_next_song(vc, None), bot.loop)
        
    if vc.is_playing():
        vc.stop()

    try:
        vc.play(
            discord.FFmpegPCMAudio(
                audio_url,
                before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
                options="-vn"
            ),
            after=after_play
        )
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi vc.play: {e}")
        if queues[guild_id]:
            await play_next_song(vc, interaction)
        return

    # ‚≠êÔ∏è Giao di·ªán Embed X·ªãn X√≤ h∆°n
    embed = discord.Embed(
        title=f"üé∂ ƒêang ph√°t: {title}",
        description=f"**üé§ Ch·ªß k√™nh ƒëƒÉng t·∫£i video:** {uploader}",
        color=0xFF0099 # H·ªìng K-Pop
    )
    embed.add_field(name="üîó Ngu·ªìn", value=f"[Xem tr√™n Web]({webpage_url})", inline=True)
    embed.set_footer(text=f"H√†ng ƒë·ª£i: {len(queues.get(guild_id, []))} b√†i | Auto-Queue ƒêang B·∫≠t üîÑ")
    
    if thumbnail:
        embed.set_thumbnail(url=thumbnail)
    
    # ‚≠êÔ∏è G·ª¨I EMBED K√àM BUTTONS
    view = PlayerButtons(bot)
    
    if interaction:
        try:
            await interaction.followup.send(embed=embed, view=view)
        except discord.errors.NotFound:
            channel = interaction.channel
            if channel:
                await channel.send(embed=embed, view=view)
    elif vc.channel:
        await vc.channel.send(embed=embed, view=view)


# ===== S·ª∞ KI·ªÜN BOT =====
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ ƒê√£ ƒë·ªìng b·ªô {len(synced)} slash command.")
    except Exception as e:
        print(f"‚ùå L·ªói khi sync slash command: {e}")
    
    await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))


# ===== /play (H·ªó tr·ª£ Search) =====
@bot.tree.command(name="play", description="Ph√°t nh·∫°c KPop ng·∫´u nhi√™n ho·∫∑c t√¨m ki·∫øm b√†i h√°t üé∂")
async def play(interaction: discord.Interaction, query: str = None):
    await interaction.response.defer() 

    guild = interaction.guild
    # ∆Øu ti√™n k√™nh tho·∫°i ng∆∞·ªùi d√πng ƒëang ·ªü
    if interaction.user.voice and interaction.user.voice.channel:
        voice_channel = interaction.user.voice.channel
    else:
        # N·∫øu kh√¥ng, t√¨m k√™nh m·∫∑c ƒë·ªãnh
        voice_channel = discord.utils.get(guild.voice_channels, name="üéß‚îÇchill-room")

    if not voice_channel:
        await interaction.followup.send("‚ùå Vui l√≤ng v√†o k√™nh tho·∫°i ho·∫∑c t·∫°o k√™nh `üéß‚îÇchill-room`.", ephemeral=True)
        return

    vc = guild.voice_client
    if vc is None:
        try:
            vc = await voice_channel.connect()
        except asyncio.TimeoutError:
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi k√™nh tho·∫°i. Vui l√≤ng th·ª≠ l·∫°i.", ephemeral=True)
            return
    
    # X·ª≠ l√Ω Query
    if query:
        if query.startswith("http"):
            url = query
            song_title = "URL ƒë√£ cung c·∫•p"
        else:
            info = await asyncio.to_thread(search_youtube, query) 
            if not info or 'webpage_url' not in info:
                await interaction.followup.send(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t cho t·ª´ kh√≥a: `{query}`.", ephemeral=True)
                return
            url = info['webpage_url']
            song_title = info['title']
    else:
        url = random.choice(DEFAULT_KPOP_SONGS)
        song_title = "b√†i h√°t ng·∫´u nhi√™n"

    queues.setdefault(guild.id, []).append(url)

    # Th√¥ng b√°o th√™m v√†o queue/b·∫Øt ƒë·∫ßu ph√°t
    if vc.is_playing() or vc.is_paused():
        await interaction.followup.send(f"‚úÖ ƒê√£ th√™m **{song_title}** v√†o h√†ng ƒë·ª£i.")
    else:
        await interaction.followup.send(f"üéß B·∫Øt ƒë·∫ßu ph√°t **{song_title}**...")
        asyncio.create_task(play_next_song(vc, interaction))


# ===== /skip, /pause, /resume, /stop, /leave (Gi·ªØ nguy√™n) =====
# C√°c l·ªánh n√†y v·∫´n ho·∫°t ƒë·ªông, nh∆∞ng n√∫t b·∫•m l√† giao di·ªán ch√≠nh
@bot.tree.command(name="skip", description="Chuy·ªÉn sang b√†i ti·∫øp theo ‚è≠Ô∏è")
async def skip(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_playing():
        vc.stop()
        await interaction.response.send_message("‚è≠Ô∏è Chuy·ªÉn sang b√†i m·ªõi...")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)

@bot.tree.command(name="pause", description="T·∫°m d·ª´ng nh·∫°c ‚è∏Ô∏è")
async def pause(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_playing():
        vc.pause()
        await interaction.response.send_message("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng ph√°t nh·∫°c.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)

@bot.tree.command(name="resume", description="Ti·∫øp t·ª•c ph√°t nh·∫°c ‚ñ∂Ô∏è")
async def resume(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_paused():
        vc.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t nh·∫°c.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang t·∫°m d·ª´ng.", ephemeral=True)

@bot.tree.command(name="stop", description="D·ª´ng ph√°t nh·∫°c ‚èπÔ∏è")
async def stop(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc:
        queues[interaction.guild.id] = []
        vc.stop() 
        await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
        await interaction.response.send_message("üõë ƒê√£ d·ª´ng ph√°t nh·∫°c v√† x√≥a queue.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Bot ch∆∞a tham gia k√™nh tho·∫°i.", ephemeral=True)

@bot.tree.command(name="leave", description="Bot r·ªùi kh·ªèi k√™nh tho·∫°i üö™")
async def leave(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc:
        queues[interaction.guild.id] = []
        await vc.disconnect()
        await bot.change_presence(activity=discord.Game(name="KPop Radio | D√πng /play"))
        await interaction.response.send_message("üëã Bot ƒë√£ r·ªùi kh·ªèi k√™nh tho·∫°i.")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Bot kh√¥ng ·ªü trong k√™nh tho·∫°i.", ephemeral=True)

@bot.tree.command(name="queue", description="Hi·ªÉn th·ªã danh s√°ch b√†i ch·ªù üìÉ")
async def queue(interaction: discord.Interaction):
    q = queues.get(interaction.guild.id, [])
    if q:
        msg = "\n".join([f"**{i+1}.** {url}" for i, url in enumerate(q[:10])])
        await interaction.response.send_message(f"üìú **Danh s√°ch b√†i ch·ªù ({len(q)} b√†i):**\n{msg}")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o trong h√†ng ƒë·ª£i.", ephemeral=True)

@bot.tree.command(name="nowplaying", description="Hi·ªÉn th·ªã b√†i h√°t ƒëang ph√°t üé∂")
async def nowplaying(interaction: discord.Interaction):
    song = current_song.get(interaction.guild.id)
    if song:
        embed = discord.Embed(
            title=f"üé∂ ƒêang ph√°t: {song['title']}",
            description=f"üé§ **Ngh·ªá sƒ©:** {song['uploader']}\nüîó [Xem tr√™n Web]({song['url']})",
            color=0xFF0099
        )
        if song["thumbnail"]:
            embed.set_thumbnail(url=song["thumbnail"])
        
        view = PlayerButtons(bot) # G·ª≠i k√®m n√∫t b·∫•m
        await interaction.response.send_message(embed=embed, view=view)
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.", ephemeral=True)

@bot.tree.command(name="shuffle", description="Tr·ªôn ng·∫´u nhi√™n danh s√°ch b√†i ch·ªù üîÄ")
async def shuffle(interaction: discord.Interaction):
    q = queues.get(interaction.guild.id, [])
    if len(q) > 1:
        random.shuffle(q)
        await interaction.response.send_message("üîÄ ƒê√£ tr·ªôn l·∫°i th·ª© t·ª± c√°c b√†i trong h√†ng ƒë·ª£i!")
    else:
        await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng ƒë·ªß b√†i ƒë·ªÉ tr·ªôn.", ephemeral=True)

@bot.tree.command(name="help", description="Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot ‚ÑπÔ∏è")
async def help(interaction: discord.Interaction):
    embed = discord.Embed(
        title="‚ú® KPop Radio Bot - H∆∞·ªõng D·∫´n L·ªánh ‚ú®",
        description="Bot ph√°t nh·∫°c ng·∫´u nhi√™n t·ª´ Dailymotion v√† YouTube c√¥ng khai. Lu√¥n d√πng l·ªánh Slash (/).",
        color=0xFF0099 
    )
    
    embed.add_field(name="‚ñ∂Ô∏è Ph√°t Nh·∫°c & ƒêi·ªÅu Khi·ªÉn", value="`/play [t√™n/link]`, `/pause`, `/resume`, `/skip`, `/stop`", inline=False)
    embed.add_field(name="üìú Th√¥ng tin & Queue", value="`/nowplaying`, `/queue`, `/shuffle`", inline=False)
    embed.add_field(name="üö™ Qu·∫£n L√Ω Bot", value="`/leave`", inline=False)

    embed.set_footer(text="üíñ ƒê∆∞·ª£c ph√°t tri·ªÉn t·∫°i Vi·ªát Nam | D√πng /play ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    await interaction.response.send_message(embed=embed)


# ===== CH·∫†Y BOT (Gi·ªØ nguy√™n) =====
TOKEN = os.getenv("DISCORD_TOKEN") 

if TOKEN:
    bot.run(TOKEN)
else:
    print("‚ùå L·ªñI NGHI√äM TR·ªåNG: KH√îNG T√åM TH·∫§Y DISCORD_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng.")
